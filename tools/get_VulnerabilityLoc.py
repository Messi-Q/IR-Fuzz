import os
import json
from libs import splitOpcode
from libs import decompressSourcemap

from libs import readContracts
from libs import load


def readJson(file):
    try:
        f = open(file, 'r')
        content = f.read()
        a = json.loads(content)
        f.close()
    except:
        print("empty report_json file!")
    return a


def readOpcode(file):
    with open(file, 'r')as f:
        data = f.read()
        return data


def get_opcodeIndex(opcodeList):
    opcodeIndex = []
    for i in range(len(opcodeList)):
        opcodeIndex.append(opcodeList[i][0])
    return opcodeIndex


def getVulLoc(inputDir, file):
    filePath = inputDir + file
    inputName = inputDir.split('../')[1] + file
    fileName = file.split('.')[0]
    fileJsonPath = inputDir + file + '.json'
    fileAsmPath = inputDir + fileName + '.asm'
    fileReportPath = inputDir + fileName + '_report.json'
    # print(fileReportPath)
    try:
        opcodes = readOpcode(fileAsmPath)
    except:
        print("empty asm file!")
        return "", False
    try:
        data = load(fileJsonPath)
        srcmap_runtime = data["contracts"][inputName + ":" + fileName]["srcmap-runtime"]
    except:
        print("empty json file!")
        return "", False
    try:
        contract = readContracts(filePath)
    except:
        print("contract is not found!")
        return "", False
    opcodeList = splitOpcode(opcodes)
    opcodeIndex = get_opcodeIndex(opcodeList)
    try:
        srcmapList = decompressSourcemap(srcmap_runtime)
    except:
        print("srcmapList is empty!")
        return "", False
    try:
        data = readJson(fileReportPath)
    except:
        print("report is empty!")
        return "", False
    Vulnerability = []
    output = {}
    for name in data['vulnerabilities']:
        source = []
        if data['vulnerabilities'][name]['number'] != '0':
            locs = data['vulnerabilities'][name]['instruction distinction'].split()
            for loc in locs:
                try:
                    loc = loc.zfill(5)
                    lIndex = opcodeIndex.index(loc)
                    offset = srcmapList[lIndex][0]
                    l = srcmapList[lIndex][1]
                    if not contract[offset:offset + l].strip().startswith("contract"):
                        source.append((offset, offset + l))
                except:
                    continue
            source = list(set(source))
            try:
                f = open(filePath, 'r')
                targets = get_loc(f, source)
            except:
                print('contract is not found!')
                return "", False
            data['vulnerabilities'][name]['source distinction'] = targets
    return data, True


def get_loc(file, source):
    lines = file.readlines()
    index = 1
    targets = []
    contractlines = {}
    count = 0
    for line in lines:
        count = count + len(line)
        contractlines[index] = count
        index += 1
    for t in source:
        flag = 1
        left = 0
        right = 0
        #print(t[0],t[1])
        for i in range(len(contractlines)):
            if i !=0 :
                if flag:
                    if contractlines[i + 1] >= t[0] and contractlines[i]<=t[0]:
                        left = i+1
                        flag = 0
                if not flag:
                    if contractlines[i + 1] >= t[1]:
                        right = i+1
                        targets.append((left, right))
                        break
    return list(set(targets))


def main():
    inputFileDir = '../contracts/'
    Files = os.listdir(inputFileDir)
    for dir in Files:
        dir = inputFileDir + dir + '/'
        files = os.listdir(dir)
        for file in files:
            outputFileDir = dir + file.split(".")[0] + '_report.json'
            if len(file.split(".")) <= 2 and file.split(".")[1] == "sol":
                output, flag = getVulLoc(dir, file)
                if not flag:
                    continue
                with open(outputFileDir, 'w') as f:
                    json.dump(output, f)


if __name__ == '__main__':
    main()
